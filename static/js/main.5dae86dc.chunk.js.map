{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","length","props","add","alert","maxDate","this","className","type","placeholder","maxLength","id","onChange","htmlFor","min","max","onClick","React","Component","Task","task","active","important","finishDateTask","style","color","delete","change","finish","toDateString","TaskList","tasks","filter","done","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","App","counter","deleteTask","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5dae86dc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends React.Component {\r\n\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: '',\r\n    checked: false,\r\n    date: this.minDate\r\n  }\r\n\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  }\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    });\r\n  }\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value\r\n    });\r\n  }\r\n\r\n  handleClick = () => {\r\n    const { text, date, checked } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n\r\n      if (add) {\r\n        this.setState({\r\n          text: '',\r\n          checked: false,\r\n          date: this.minDate\r\n        });\r\n      }\r\n    } else {\r\n      alert('need more words...');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + '-12-31';\r\n\r\n    return (\r\n      <div className=\"form\">\r\n        <input className=\"task-input\" type=\"text\" placeholder=\"add task\" maxLength=\"30\" value={this.state.text} id=\"important\" onChange={this.handleText} />\r\n        <div className=\"date-wrapper\">\r\n          <label htmlFor=\"date\">Date to do: </label>\r\n          <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate} />\r\n        </div>\r\n        <div className=\"buttons-checks\">\r\n          <input className=\"btn input-check\" type=\"checkbox\" checked={this.state.checked} onChange={this.handleCheckbox} />\r\n          <label className=\"btn\" htmlFor=\"important\">Priority</label>\r\n          <button className=\"btn add-task-btn\" onClick={this.handleClick}>Add</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\nimport './Task.css'\r\n\r\nconst Task = (props) => {\r\n\r\n  const { text, date, id, active, important, finishDateTask } = props.task;\r\n\r\n  const style = {\r\n    color: 'red'\r\n  }\r\n\r\n  if (active) {\r\n    return (\r\n      <div className=\"list-item\">\r\n        <div className=\"date-tasks\">\r\n          <span>{date}</span>\r\n          <div className='task-name'><strong style={important ? style : null}>{text}</strong></div>\r\n        </div>\r\n        <button className='btn-delete task-btn' onClick={() => props.delete(id)}><i className=\"fa fa-trash\"></i></button>\r\n        <button className='btn-done task-btn' onClick={() => props.change(id)}><i className=\"fa fa-check-circle\"></i></button>\r\n      </div >\r\n    );\r\n  } else {\r\n\r\n    const finish = new Date(finishDateTask).toDateString();\r\n    return (\r\n      <div className=\"list-item-done\">\r\n        <p>Task finished:</p>\r\n        <span>{finish}</span><br />\r\n        <p className=\"task-name-done\"><strong>{text}</strong></p>\r\n        <em> (to do - {date}) </em>\r\n        <button className='btn-delete task-btn' onClick={() => props.delete(id)}><i className=\"fa fa-trash\"></i></button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\nimport './TaskList.css'\r\n\r\nconst TaskList = (props) => {\r\n\r\n  const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => b.finishDateTask - a.finishDateTask);\r\n  }\r\n\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    })\r\n  }\r\n\r\n  // done.sort((a, b) => {\r\n  //   if (a.finishDateTask < b.finishDateTask) {\r\n  //     return 1;\r\n  //   }\r\n  //   if (a.finishDateTask > b.finishDateTask) {\r\n  //     return -1;\r\n  //   }\r\n  //   return 0;\r\n  // })\r\n\r\n  const activeTasks = active.map(task => <Task key={task.id}\r\n    task={task} delete={props.delete} change={props.change} />);\r\n\r\n  const doneTasks = done.map(task => <Task key={task.id}\r\n    task={task} delete={props.delete} change={props.change} />);\r\n\r\n  return (\r\n    <div className=\"list\">\r\n      <div className=\"active\">\r\n        <h1>Tasks to do</h1>\r\n        {activeTasks.length > 0 ? activeTasks : <p>No tasks!</p>}\r\n      </div>\r\n      <div className=\"done\">\r\n        <h3>Tasks done ( <em>{done.length}</em> )</h3>\r\n        {doneTasks}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskList;","import React from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\nimport './App.css';\n\nclass App extends React.Component {\n\n  counter = 0;\n  state = {\n    tasks: []\n  }\n\n  deleteTask = (id) => {\n    // const tasks = [...this.state.tasks];\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index, 1);\n\n    // this.setState({\n    //   tasks\n    // });\n\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id);\n    this.setState({\n      tasks\n    });\n  }\n\n  changeTaskStatus = (id) => {\n    // let tasks = [...this.state.tasks];\n    const tasks = Array.from(this.state.tasks);\n\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDateTask = new Date().getTime();\n      }\n    });\n\n    this.setState({\n      tasks\n    });\n  }\n\n  addTask = (text, date, important) => {\n\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDateTask: null\n    }\n    this.counter++;\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }));\n\n    return true;\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"app-wrapper\">\n          <h1>Task App 1.0</h1>\n          <div className=\"main\">\n            <AddTask add={this.addTask} />\n            <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} />\n          </div>\n          <footer>Copyright @2020 | Mateusz Lewartowski</footer>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}